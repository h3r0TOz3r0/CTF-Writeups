#!/usr/bin/python
from Crypto.Util.number import long_to_bytes

p = 
q = 
c = 
n = 
e = 

# c    = m^e % n
# m    = c^d % n
# d    = e^-1 % h(n)
# h(n) = (p-1)(q-1)

def egcd(a, b):
    if a == 0:
        return(b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x- (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

phi = (p-1)*(q-1)
d = modinv(e, phi)

m = pow(c,d,n)

print(long_to_bytes(m))
